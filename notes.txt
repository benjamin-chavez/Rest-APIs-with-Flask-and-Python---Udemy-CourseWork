SECTION 2:
********************************************************
5.29 - Lambda functions in Python
  - lambda functions do not have names and are only used 
    to return values
  - Used to return value not to perform actions


SECTION 3:
********************************************************
3.57 - HTTP Verbs"
- Requests tell the server to:
    GET - Retrieve Something
    Post - Receive data, and use it
    Put - Make sure that something is there
    Delete - Remove something

3.58 - REST Principles
- REST is a way of thinking about how a web server responds to your Requests
  the server responds with resources
- Same endpoint for different requests == same resource
- REST is stateless - One request cannot depen on any other requests

SECTION 4 (& section 6 setup):
********************************************************
4.64 - Firualenvs and setting up Flask-RESTful
- virtualenv venv --python=python3    - run this to set up the virtual environment
- source venv/bin/activate            - Mac/Linux - activate virtual environment
- ./venv/Scripts/activate.bat         - Windows
- deactivate                          - To leave the virtual environment
- rm -rf venv                         - To delete virtual environment
- pip3 install Flask
- pip3 install Flask-JWT              - For JWT Authentication
- pip3 install Flask-RESTful          - For API Mappings
- pip3 install Flask-SQLAlchemy       - SQLAlchemy for Flask

- mkdir code                          - Create a folde called code and cd into it
- python3 app.py                      - TO RUN SERVER

4.71 - Authentication and loggin in - pt. 1
- pip3 install Flask-JWT              install JSON Web Tokens
- Create mapping functions in security.py so that we do not have to iterate 
  through the database when we want to find a user, we can find the user
  simply by knowing their username or id

Status Codes:
- 200         - Okay
- 201         - Created
- 202         - Accepted - delaying the creation of an object
- 400         - Bad Request (user error)
- 404         - Not Found
- 500         - internal server error

Section 5:
********************************************************
Section 6:
********************************************************
Model - A model is our internal representation of an entity
      - Must contain the class properties as object properties
Resource - a resource is the external representation of an entity

- python3 create_tables.py            - to create SQLAlchemy database prior to running your app
  **
    -By running the following code in the app.py file, you don't need to run the create_table.py command
  @app.before_first_request
  def create_tables():
    db.create_all()

- python 3 app.py                     - be sure to start your app from the same folder where you ran create_tables command

Setting up SQLAlchemy:
  - In your main code folder create a file <db.py>

Section 7: Git
********************************************************
- git rm --cached <file>..              - to unstage from a commit

- Adding a README file with vim:
  - vim README.md                       - To enter vim for your new README file
  - i                                   - To enter the text editor within vim
  - esc (key)                           - To exit vim
  - :wq                                 - To save and create the README file

Section 8: Deploying Flask apps to Heroku
********************************************************
- touch .gitignore                      - Create your .gitignore file
- vi .gitignore                         -
- git init                              - Create your git Repo
- touch runtime.txt                     - tells Heroku the language and version
- touch requirements.txt                - Tells Heroku which libraries to use
                                            * Note: Add wsgi to this file, but you do not need to install it locally.
- touch uwsgi.ini                       - Add config params for usgi process to run on app.
- touch Procfile                        - specify the dyno to use in Heroku

Section 9: Deploying Flask apps to our own server
********************************************************
1. Create Droplet 
    - image: ubuntu 16.04
    - size: $5/mo
    - block storage: ignore
    - region: NY
    * Go to the console and login
    - login: root
    - pw: 2019leW@gon

2. Link your terminal to digital ocean & install postgresql
    - ssh root@<your server ip>
    - apt-get install postgresql postgresql-contrib
    - sudo -i -u postgres               - Switch user to the postgres user
    - psql                              - Connects to the postgresql database
    - \conninfo                         - Provides info on db and user
    - \q                                - Leaves the db and goes to unix terminal
    - exit                              - logs out of postgres user and is back at root user
f54724cdfb045c6b80680aa547

3. Creating a UNIX user
    - adduser ben
    - visudo                            - allow ben user to gain temporary access to root
    - **update the text file that appears in your terminal to look like the following:
          # User privilege specification
          root    ALL=(ALL:ALL) ALL
          ben     ALL=(ALL:ALL) ALL
    - ctrl o > enter                    - to save over the file
    - ctrl x                            - to exit
    - vi /etc/ssh/sshd_config           - to ensure that we can log into the server directly as the ben user as apposed to the root user
      ** Update the file to show the following by pressing "i" (insert mode) then editing
          # Authentication:
          LoginGraceTime 120
          PermitRootLogin no
          StrictModes yes

          # Change to no to disable tunnelled clear text passwords
          PasswordAuthentication yes
          AllowUsers ben
    - type :wq                          - write and quite
    - service sshd reload               - reload the service and allows us to use the new configuration
    - exit
    - ssh <user>@<your server ip>       - Login in as ben user (ssh ben@206.189.186.205)
    - sudo su                           - Access root

4. link ben user to postgres:
    - ssh ben@206.189.186.205           - Login as user
    - sudo su                           - Become root user
    - sudo -i -u postgres               - Become postgres user
    - createuser ben -P                 - Create a postgresql user (be sure to use the same name as UNIX user)
    - createdb ben                      - make sure there is a db created for that user
    - exit                              - go back to root
    - exit                              - go back to ben
    - psql                              - Connects to the ben database
    - dropdb                            - ** if at any point you want to drop the db run this.
    - sudo vi /etc/postgresql/10/main/pg_hba.conf    - user login security config file
    - * Update the file to show the following (local = request is coming from server & host = request is coming over internet):
          # "local" is for Unix domain socket connections only
          local   all             all                                     md5

5. Install nginx and running our app:
    - nginx is a reverse proxy. It acts as a gateway between our application and external users. We are configuring nginx to send requests
      straight to our app.
    - sudo apt-get update               - update server
    - sudo apt-get install nginx
    - sudo ufw status                   - let nginx have access through firewall
    - sudo ufw enable                   - enable firewall
    - sudo ufw allow 'Nginx HTTP'       - puts nginx in the firewall
    - sudo uwf allow ssh                - to ensure that we don't get locked out of the server
    - systemctl status nginx            - ensure nginx is running (check trhough system controller)
    - sudo vi /etc/nginx/sites-available/items-rest.conf        - add config paramaters to nginx to ensure it can access API
      add the following to the file:
            server {
            listen 80;
            real_ip_header X-Forwarded-For;
            set_real_ip_from 127.0.0.1;
            server_name localhost;

            location / {
            include uwsgi_params;
            uwsgi_pass unix:/var/www/html/items-rest/socket.sock;
            uwsgi_modifier1 30;
            }

            error_page 404 /404.html;
            location = /404.html {
            root /usr/share/nginx/html;
            }

            error_page 500 502 503 504 /50x.html
            location = /50x.html {
            root /usr/share/nginx/html;
            }
            }
    - press escape key then type ':wq' to write and quit
    12:21
    - sudo ln -s /etc/nginx/sites-available/item-rest.conf /etc/nginx/sites-enabled/        - To enable the nginx config
    - sudo mkdir /var/www/html/items-rest                   - Create folder where the app will live
    - sudo chown ben:ben /var/www/html/items-rest           - Make ben user and ben group the owner of the new directory (chown = change owner)
    - cd /var/www/html/items-rest/                          - change into the new directory
    - git clone https://github.com/schoolofcode-me/stores-rest-api.git .                    - Clone the git repo
    - mkdir log                                             - Create a directory for our app's logs
    - sudo apt-get install python-pip                       - Install python package manager
    - sudo apt-get install python3-dev                      - Install tools for python to compile from source
    - sudo apt-get install libpq-dev                        - Allows us to run psycopg2 for postgres
    - pip install virtualenv                                - Install Virtual environment so that we do not polute the main 
                                                              ubuntu install with our libraries
    - virtualenv venv --python=python3                      - setup our virtual env
    - source venv/bin/activate                              - Go into the new virtual environment
    - pip install -r requirements.txt                       - Get all requirements from requirements.txt file and install in our virutal environment

6. Set up uwsgi so that our app can communicate with uwsgi and nginx can communicate with uwsgi to create a complete chain:
    :Create an Ubuntu Service (a descriptor of a program)
      - sudo vi /etc/systemd/system/uwsgi_items_rest.service      - open up text editor to create and edit a file in the folder.
                                                                    when you create .service files in this folder ubuntu knows it is a 
                                                                    service that can be run using the system controller.
      - Update the new file with the below. Then press escape key and type ':wq' to write and quit
            [Unit]
            Description=uWSGI items rest

            [Service]
            Environment=DATABASE_URL=postgres://ben:2019leW@gon@localhost:5432/ben
            ExecStart=/var/www/html/items-rest/venv/bin/uwsgi --master --emperor /var/www/html/items-rest/uwsgi.ini --die-on-term --uid ben --gid ben --logto /var/www/html/items-rest/log/emperor.log
            Restart=always
            KillSignal=SIGQUIT
            Type=notify
            NotifyAccess=all

            [Install]
            WantedBy=multi-user.target
      - vi uwsgi.ini                                              - Open and change the uwsgi file to the below to tell the uwsg 
                                                                    process how to run our python code . Then press escape key and 
                                                                    type ':wq' to write and quit.
            [uwsgi]
            base = /var/www/html/items-rest
            app = run
            module = %(app)

            home = %(base)/venv
            pythonpath = %(base)

            socket = %(base)/socket.sock

            chmod-socket = 777

            processes = 8

            threads = 8

            harakiri = 15

            callable = app

            logto = /var/www/html/items-rest/log/%n.log
      - sudo systemctl start uwsgi_items_rest                 - Start our Flask app
      - vi log/uwsgi.log                                      - Go into log folder and look at uwsgi log (:q to exit)




